class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        
        dfa = []
        to_node = 1
        for inx , reg in enumerate(p) :
            current = {}
            
            if inx > 0 and p[inx-1] == '*':
                continue
            
            if reg == '*':
                current[p[inx-1]] = to_node -1
                if len(p) > inx +1 and p[inx+1] != p[inx-1]:
                    current[p[inx+1]] = to_node
                    
            else:
                if len(p) > inx +2 :
                    if p[inx+1] == '*':
                        current[p[inx+2]] = to_node+1
                
                current[reg] = to_node
            
            dfa.append(current)
            to_node += 1
            
        
        
        
        current = 0    
        total_node = len(dfa)
        total_word = len(s)
        
        post_fix = 0
        if p[-1] == '.':
            post_fix = 1
        
        print(dfa)
        
        
        for inx, word in enumerate(s):
            
            if current >= total_node : 
                return False
                
            
            if '.' in dfa[current] and inx != 0 and total_node - current + post_fix < total_word - inx: 
                current = dfa[current]['.']
                
            elif word in dfa[current] :
                
                current = dfa[current][word]

            elif '.' in dfa[current] : 
                current = dfa[current]['.']
                
            else:
                return False
            
            
        
        return current == max(dfa[-1].values())
        
        
